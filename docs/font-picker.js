/*
 * Copyright 2025 faddenSoft
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Font from "./lib/font.js";
// import Debug from "./debug.js";

//
// Font picker implementation.  This implements the <dialog> in the editor page.
//
// This class must be instantiated exactly once.
//
export default class FontPicker {
    static isInitialized = false;

    // Browser text size limits.  These are also in the HTML page.
    static MIN_TEXT_SIZE = 4;
    static MAX_TEXT_SIZE = 200;

    static SELECTED = "selected";

    mCurrentFont = undefined;
    get currentFont() { return this.mCurrentFont; }

    // Last selected browser font.  Not retained between sessions.
    lastStyle = "bold";
    lastSize = "20";
    lastFamily = "Arial";
    browserFont = undefined;

    // Last selected bitmap font.
    bitmapFont = undefined;

    constructor(mainObj) {
        if (FontPicker.isInitialized != false) {
            throw new Error("FontPicker initialized twice");
        }

        this.mainObj = mainObj;

        this.dialog = document.getElementById("font-picker");
        this.selectBitmapElem = document.getElementById("fp-use-bitmap");
        this.selectBrowserElem = document.getElementById("fp-use-browser");
        this.browserFontStyleElem = document.getElementById("browser-font-style");
        this.browserFontFamilyElem = document.getElementById("browser-font-family");
        this.browserFontSizeElem = document.getElementById("browser-font-size");
        this.okButtonElem = document.getElementById("font-picker-ok");

        this.okButtonElem.addEventListener("click", this.handleDone.bind(this));
        this.browserFontFamilyElem.addEventListener("keypress", this.handleKeyInput.bind(this));
        this.browserFontSizeElem.addEventListener("keypress", this.handleKeyInput.bind(this));

        this.selectBitmapElem.addEventListener("click", () => {
            this.handleSelectFontType(false);
        });
        this.selectBrowserElem.addEventListener("click", () => {
            this.handleSelectFontType(true);
        });

        this.bitmapFont = new Font(Font.TYPE_HI_RES, FontPicker.DEFAULT_HGR_FONT);
        this.browserFont = new Font(Font.TYPE_BROWSER,
            `${this.lastStyle} ${this.lastSize}px ${this.lastFamily}`);
        this.mCurrentFont = this.bitmapFont;
        this.selectBitmapElem.classList.add(FontPicker.SELECTED);

        this.browserFontStyleElem.value = this.lastStyle;
        this.browserFontSizeElem.value = this.lastSize;
        this.browserFontFamilyElem.value = this.lastFamily;

        FontPicker.isInitialized = true;
        console.log("FontPicker initialized");
    }

    //
    // Shows the dialog.
    //
    showDialog() {
        this.dialog.showModal();
    }

    //
    // Catches key input events, so we can close the dialog when the user hits Enter.
    //
    handleKeyInput(event) {
        if (event.key == "Enter") {
            event.preventDefault();
            this.okButtonElem.click();
        }
    }

    //
    // Handles clicks on the "bitmap" and "browser" buttons.
    //
    handleSelectFontType(useBrowser) {
        if (useBrowser) {
            this.selectBitmapElem.classList.remove(FontPicker.SELECTED);
            this.selectBrowserElem.classList.add(FontPicker.SELECTED);
            this.mCurrentFont = this.browserFont;
        } else {
            this.selectBitmapElem.classList.add(FontPicker.SELECTED);
            this.selectBrowserElem.classList.remove(FontPicker.SELECTED);
            this.mCurrentFont = this.bitmapFont;
        }
    }

    //
    // Handles a click on the "OK" button.
    //
    handleDone() {
        // Process the browser inputs.  We do this regardless of which one is selected.
        let style = this.browserFontStyleElem.value;
        let size = Number(this.browserFontSizeElem.value);
        let family = this.browserFontFamilyElem.value;
        console.log(`Font pick: ${style} ${size}px ${family}`);
        if (family.length == 0 ||
                size < FontPicker.MIN_TEXT_SIZE || size > FontPicker.MAX_TEXT_SIZE) {
            console.log(`ignoring invalid font request: ${style} ${size}px '${family}'`);
        } else {
            this.browserFont = new Font(Font.TYPE_BROWSER, `${style} ${size}px ${family}`);
            this.lastStyle = style;
            this.lastFamily = family;
            this.lastSize = size;
        }

        // Select the appropriate font type.
        if (this.selectBrowserElem.classList.contains(FontPicker.SELECTED)) {
            this.mCurrentFont = this.browserFont;
        } else {
            this.mCurrentFont = this.bitmapFont;
        }

        this.dialog.close();
    }


    //
    // Font from the 1984 release of The Graphics Magician, by Penguin Software.  This was
    // embedded in the standard hi-res "picture painter" binary.  It features 7x8 glyphs with
    // thick vertical strokes, allowing text to remain somewhat readable when drawn in color.
    //
    // It's worth noting that TGM's text drawing routine drew at arbitrary positions, and
    // advanced the X position by 8 rather than 7, ensuring a gap of at least one pixel
    // between adjacent characters.  This is different from most HRCGs.
    //
    static DEFAULT_HGR_FONT = [
        0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1c,0x1c,0x1c,0x1c,0x00,0x1c,0x1c,0x00,
        0x36,0x36,0x24,0x36,0x00,0x00,0x00,0x00,0x12,0x3f,0x3f,0x12,0x3f,0x3f,0x12,0x00,
        0x0c,0x3f,0x03,0x3f,0x30,0x3f,0x0c,0x00,0x00,0x27,0x17,0x0f,0x3c,0x3a,0x39,0x00,
        0x06,0x09,0x02,0x04,0x2a,0x11,0x2e,0x00,0x0c,0x0c,0x08,0x0c,0x00,0x00,0x00,0x00,
        0x38,0x1c,0x0e,0x0e,0x0e,0x1c,0x38,0x00,0x0e,0x1c,0x38,0x38,0x38,0x1c,0x0e,0x00,
        0x08,0x2a,0x1c,0x3e,0x1c,0x2a,0x08,0x00,0x0c,0x0c,0x3f,0x3f,0x0c,0x0c,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x1c,0x18,0x0c,0x00,0x00,0x3e,0x3e,0x00,0x00,0x00,0x00,
        0x00,0x00,0x00,0x00,0x00,0x1c,0x1c,0x00,0x60,0x70,0x38,0x1c,0x0e,0x07,0x03,0x00,
        0x1e,0x33,0x33,0x33,0x33,0x33,0x1e,0x00,0x3c,0x36,0x33,0x30,0x30,0x30,0x30,0x00,
        0x1e,0x3f,0x33,0x38,0x0e,0x3f,0x3f,0x00,0x1e,0x3f,0x30,0x3e,0x30,0x3f,0x1e,0x00,
        0x38,0x3c,0x36,0x33,0x3f,0x30,0x30,0x00,0x3f,0x3f,0x03,0x1f,0x30,0x3f,0x1e,0x00,
        0x1c,0x06,0x03,0x1f,0x33,0x33,0x1e,0x00,0x3f,0x3f,0x30,0x18,0x0c,0x0c,0x0c,0x00,
        0x1e,0x3f,0x33,0x1e,0x33,0x3f,0x1e,0x00,0x1e,0x3f,0x33,0x3e,0x30,0x3e,0x1e,0x00,
        0x00,0x1c,0x1c,0x00,0x00,0x1c,0x1c,0x00,0x00,0x1c,0x1c,0x00,0x00,0x1c,0x18,0x0c,
        0x70,0x38,0x1c,0x0e,0x1c,0x38,0x70,0x00,0x00,0x3e,0x3e,0x00,0x3e,0x3e,0x00,0x00,
        0x07,0x0e,0x1c,0x38,0x1c,0x0e,0x07,0x00,0x1e,0x3f,0x33,0x18,0x0c,0x00,0x0c,0x00,
        0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x7f,0x1e,0x3f,0x33,0x3f,0x3f,0x33,0x33,0x00,
        0x1f,0x3f,0x33,0x1f,0x33,0x3f,0x1f,0x00,0x1e,0x3f,0x33,0x03,0x33,0x3f,0x1e,0x00,
        0x1f,0x3f,0x33,0x33,0x33,0x3f,0x1f,0x00,0x3f,0x3f,0x03,0x1f,0x03,0x3f,0x3f,0x00,
        0x3f,0x3f,0x03,0x1f,0x1f,0x03,0x03,0x00,0x1e,0x3f,0x03,0x3b,0x33,0x3f,0x1e,0x00,
        0x33,0x33,0x33,0x3f,0x3f,0x33,0x33,0x00,0x3f,0x3f,0x0c,0x0c,0x0c,0x3f,0x3f,0x00,
        0xb0,0xb0,0xb0,0xb0,0xb3,0xbf,0x9e,0x80,0x33,0x3b,0x1f,0x0f,0x1f,0x3b,0x33,0x00,
        0x03,0x03,0x03,0x03,0x03,0x3f,0x3f,0x00,0x63,0x77,0x6b,0x63,0x63,0x63,0x63,0x00,
        0x33,0x33,0x37,0x3f,0x3b,0x33,0x33,0x00,0x1e,0x3f,0x33,0x33,0x33,0x3f,0x1e,0x00,
        0x1f,0x3f,0x33,0x3f,0x1f,0x03,0x03,0x00,0x1e,0x3f,0x23,0x23,0x2b,0x13,0x2e,0x00,
        0x1f,0x3f,0x33,0x3f,0x1f,0x3b,0x33,0x00,0x1e,0x3f,0x03,0x1e,0x30,0x3f,0x1e,0x00,
        0x3f,0x3f,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x33,0x33,0x33,0x33,0x33,0x3f,0x1e,0x00,
        0x33,0x33,0x33,0x33,0x33,0x1e,0x0c,0x00,0x63,0x63,0x63,0x6b,0x6b,0x77,0x63,0x00,
        0x33,0x33,0x1e,0x0c,0x1e,0x33,0x33,0x00,0x33,0x33,0x33,0x1e,0x0c,0x0c,0x0c,0x00,
        0x3f,0x3f,0x18,0x0c,0x06,0x3f,0x3f,0x00,0x1f,0x1f,0x03,0x03,0x03,0x1f,0x1f,0x00,
        0x03,0x07,0x0e,0x1c,0x38,0x70,0x60,0x00,0x1f,0x1f,0x18,0x18,0x18,0x1f,0x1f,0x00,
        0x0c,0x1e,0x3f,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x80,0x80,0x80,0x80,0xff,0xff,
        0x06,0x0c,0x18,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x1e,0x30,0x3e,0x33,0x3e,0x00,
        0x03,0x03,0x1f,0x33,0x33,0x33,0x1f,0x00,0x00,0x00,0x1e,0x33,0x03,0x33,0x1e,0x00,
        0x30,0x30,0x3e,0x33,0x33,0x33,0x3e,0x00,0x00,0x00,0x1e,0x33,0x1f,0x03,0x1e,0x00,
        0x1c,0x36,0x06,0x1f,0x06,0x06,0x06,0x00,0x00,0x00,0x1e,0x33,0x33,0x3e,0x30,0x1e,
        0x03,0x03,0x1f,0x33,0x33,0x33,0x33,0x00,0x00,0x0c,0x00,0x0c,0x0c,0x0c,0x0c,0x00,
        0x30,0x00,0x30,0x30,0x30,0x33,0x33,0x1e,0x03,0x03,0x33,0x1b,0x0f,0x1b,0x33,0x00,
        0x0e,0x0c,0x0c,0x0c,0x0c,0x0c,0x1e,0x00,0x00,0x00,0x3f,0x5b,0x5b,0x5b,0x5b,0x00,
        0x00,0x00,0x1f,0x33,0x33,0x33,0x33,0x00,0x00,0x00,0x1e,0x33,0x33,0x33,0x1e,0x00,
        0x00,0x00,0x1f,0x33,0x33,0x1f,0x03,0x03,0x00,0x00,0x3e,0x33,0x33,0x3e,0x30,0x30,
        0x00,0x00,0x1f,0x33,0x03,0x03,0x03,0x00,0x00,0x00,0x1e,0x03,0x1e,0x30,0x1e,0x00,
        0x06,0x06,0x1f,0x06,0x06,0x36,0x1c,0x00,0x00,0x00,0x33,0x33,0x33,0x33,0x3e,0x00,
        0x00,0x00,0x33,0x33,0x33,0x1e,0x0c,0x00,0x00,0x00,0x6d,0x6d,0x6d,0x6d,0x7e,0x00,
        0x00,0x00,0x33,0x1e,0x0c,0x1e,0x33,0x00,0x00,0x00,0x33,0x33,0x33,0x3e,0x30,0x1e,
        0x00,0x00,0x3f,0x18,0x0c,0x06,0x3f,0x00,0x1c,0x1e,0x06,0x07,0x06,0x1e,0x1c,0x00,
        0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0e,0x1e,0x18,0x38,0x18,0x1e,0x0e,0x00,
        0x00,0x00,0x28,0x14,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
    ];
}
